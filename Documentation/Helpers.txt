Overview
This file briefly describes the helper (internal) functions used in the toolbox. These functions support core simulation and plotting routines.
Note: These are not intended for direct use by the end user.

1. AssignStrategies
Purpose:
Assigns strategy functions to players according to the specified population vector.

Usage:
Players = AssignStrategies(Pop, Strategies)
Where
	Pop: A vector indicating how many players use each strategy.
	Strategies: A cell array of strategy function handles.
Description:
Creates a cell array where each element corresponds to a player’s assigned strategy, repeating each strategy according to its population count.

2. Axel
Purpose:
Simulates a round-robin tournament among a population using given strategies and computes the total scores for each player.

Usage:
Scores = Axel(B, Strategies, Pop, T)
Where
	B: Payoff matrix for the Prisoner’s Dilemma.
	Strategies: Cell array of strategy function handles.
	Pop: Population vector for each strategy.
	T: Number of rounds per match.
Description:
Assigns strategies to all players, then plays a match between every unique pair, summing up the payoffs.

3. GrPlot
Purpose:
Plots the state transition graph using theoretical transition probabilities, coloring nodes according to state metrics.

Usage:
SC = GrPlot(fname)
Where
	fname: String, the filename of a .mat file containing simulation data (including mc, PP, S, N, and L variables).

Description:
    Loads simulation data from the file.
    Constructs a directed graph from the transition matrix.
    Computes and normalizes node colors.
    Plots the state transition graph with nodes colored according to the normalized state vector.
    Useful for visualizing the theoretical results of the evolutionary process.

4. MatchPayoff
Purpose:
Simulates a repeated Prisoner's Dilemma match between two strategies and returns the accumulated payoffs.

Usage:
[Payoff1, Payoff2] = MatchPayoff(Strategy1, Strategy2, B, T)

Where
	Strategy1, Strategy2: Function handles for the two strategies.
	B: Payoff matrix.
	T: Number of rounds to play.
Description:
Plays T rounds between the two strategies, maintaining and updating the history, and sums the total payoffs for both players.

Final Note:
Users do not need to run these helper functions explicitly

5. get_stationary_colors
Purpose:
Computes node colors based on the stationary distribution of a Markov transition matrix for visualization.

Usage:
    PP = get_stationary_colors(P, cmap_name)
Where
    P: Square Markov transition matrix.
    cmap_name (optional): String, name of the MATLAB colormap (e.g., 'jet', 'parula'). Defaults to 'jet'.
Outputs
    PP: An array of RGB colors corresponding to each state, normalized by stationary probability.
Description:
    Finds the stationary distribution of P.
    Normalizes it and maps each value to a color in the specified colormap.
    Used for node coloring in Markov state transition plots.
    
6. enumerate_states
Purpose:
Enumerates all possible distributions of N players among M strategies.

Usage:
    states = enumerate_states(N, M)
Where
    N: Number of players.
    M: Number of possible strategies.
Outputs
    states: An array where each row represents a possible allocation of players to strategies (summing to N).

Description:
    Recursively generates all possible combinations of players across strategies.
    Used for theoretical analysis and Markov state enumeration.
